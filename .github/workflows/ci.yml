name: CI

on:
  pull_request:
  push:
    branches: [main]
  workflow_dispatch:
  merge_group:

permissions:
  contents: read
  pull-requests: write

jobs:
  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          components: rustfmt
      - uses: Swatinem/rust-cache@v2
      - name: Rustfmt Check
        uses: actions-rust-lang/rustfmt@v1

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          components: clippy
      - uses: Swatinem/rust-cache@v2
      - uses: clechasseur/rs-clippy-check@v4
        with:
          args: --workspace --all-targets -- -D warnings

  check:
    name: Cargo Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
      - uses: Swatinem/rust-cache@v2
      - name: Cargo check
        run: cargo check --workspace --all-targets

  test:
    name: Tests
    runs-on: ubuntu-latest
    env:
      MM_NEO4J__URI: neo4j://localhost:7688
      MM_NEO4J__USERNAME: neo4j
      MM_NEO4J__PASSWORD: password
    steps:
      - uses: actions/checkout@v4
      - name: Start services
        run: docker compose up -d
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          rustflags: ""
          components: llvm-tools-preview
      - uses: Swatinem/rust-cache@v2
      - uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest
      - uses: taiki-e/install-action@cargo-llvm-cov
      - name: Run tests with coverage
        run: |
          mkdir -p coverage
          cargo llvm-cov nextest --workspace --all-targets --profile ci --no-fail-fast --lcov --output-path coverage/lcov.info
      - name: Test CLI tools command
        run: |
          # Run the CLI command and check if it returns valid JSON
          output=$(cargo run -p mm-cli -- --config config/default.toml tools call tools/list '{}')
          echo "CLI output: $output"
          
          # Check if the output is valid JSON
          echo "$output" | jq . || (echo "CLI command did not return valid JSON" && exit 1)
      - name: Upload junit report
        uses: actions/upload-artifact@v4
        with:
          name: junit-report
          path: target/nextest/ci/junit.xml
      - name: Test Summary
        uses: test-summary/action@v2
        with:
          paths: "target/nextest/ci/junit.xml"
        if: always()
      - name: Setup LCOV
        uses: hrishikesh-kadam/setup-lcov@v1
      - name: Report coverage to PR
        uses: zgosalvez/github-actions-report-lcov@v4
        with:
          coverage-files: coverage/lcov.info
          github-token: ${{ secrets.GITHUB_TOKEN }}
          artifact-name: code-coverage-report
          update-comment: true

  check-flake:
    runs-on: ubuntu-22.04
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: DeterminateSystems/nix-installer-action@v6
      - uses: DeterminateSystems/flakehub-cache-action@main
      - name: Show flake
        run: nix flake show
      - name: Check flake
        run: nix flake check

  build:
    runs-on: ubuntu-22.04
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: DeterminateSystems/nix-installer-action@v6
      - uses: DeterminateSystems/flakehub-cache-action@main
      - name: Build package
        run: nix build .#middle_manager
